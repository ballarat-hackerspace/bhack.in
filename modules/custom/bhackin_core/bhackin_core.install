<?php
/**
 * @file
 * Installation functions for bHack.in core
 */

/**
 * Implements hook_install().
 */
function bhackin_core_install() {
  // Ensure persistent update isn't skipped.
  // @TODO - We don't want to re-run any updates on subsequent installs. Ensure
  // That on install we set the update hook prior to the 8000 update is set.
  drupal_set_installed_schema_version('bhackin_core', 0);

  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Assign 'superuser' role to 'admin'.
  // @TODO - Patch Profiler to allow updating of existing users.
  $user = user_load(1);

  $user->mail = 'admin@bhack.in';

  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    if ($role == 'superuser') {
      $user->roles[$rid] = $role;
      break;
    }
  }
  user_save($user);

  // @TODO - Add OAuth Connector 'email' field during install.
  // @TODO - Make OAuth Connector fields exportable. #2260353
}

/**
 * [PERSISTENT] Flush caches and revert features.
 */
function bhackin_core_update_8000() {
  // Flush caches and revert features.
  _bhackin_core_flush_revert();

  // Set the schema back to the last non-persistent update.
  $schemas = drupal_get_schema_versions('bhackin_core');
  array_unshift($schemas, 0);
  drupal_set_installed_schema_version('bhackin_core', $schemas[count($schemas) - 2]);
}

/**
 * Helper function; Enable dependencies, flush caches and revert the feature.
 */
function _bhackin_core_flush_revert() {
  if (empty($modules)) {
    $modules = basename(__FILE__, '.install');
  }
  if (!is_array($modules)) {
    $modules = array($modules);
  }

  $revert = array();
  foreach ($modules as $module) {
    $info = system_get_info('module', $module);

    // Enable all dependencies.
    module_enable($info['dependencies']);

    // Forcefully clear Features caches.
    module_load_include('inc', 'features', 'features.export');
    foreach (array_keys($info['features']) as $component) {
      features_get_components($component, NULL, TRUE);
      features_include_defaults($component, TRUE);
      features_get_default($component, $module, TRUE, TRUE);
    }

    // Revert all feature components except for 'OAuth Connector providers'.
    unset($info['features']['oauthconnector_provider']);

    // Build components list for feature revert.
    $revert[$module] = array_keys($info['features']);
  }

  // Flush Prepro cache.
  cache_clear_all('prepro:map', 'cache_prepro');

  // Flush all standard Drupal caches.
  drupal_flush_all_caches();

  features_revert($revert);
}

/**
 * Delete old Blog link, flush caches and revert the feature.
 */
function bhackin_core_update_7100() {
  // Delete old Blog link.
  menu_link_delete(205);

  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();
  features_revert(array('bhackin_core' => array('variable', 'permissions')));
}

/**
 * Flush caches and revert the feature, delete existing user aliases and
 * regenerate user aliases.
 */
function bhackin_core_update_7102() {
  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Run a second time due to Multifield oddity.
  _bhackin_core_flush_revert();

  // Delete existing User aliases.
  db_delete('url_alias')
    ->condition('source', db_like('user/') . '%', 'LIKE')
    ->execute();

  // Regenerate User aliases.
  $uids = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', '0', '>')
    ->execute()
    ->fetchCol('uid');
  pathauto_user_update_alias_multiple($uids, 'bulkupdate', array('alias blog' => FALSE));
}

/**
 * Flush caches and revert the feature.
 */
function bhackin_core_update_7103() {
  _bhackin_core_flush_revert();
}

/**
 * Toggle default themes, migrate fields from user to profile, add products and
 * disable rules.
 */
function bhackin_core_update_7104() {
  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Toggle default theems.
  theme_enable(array('bhackin_theme'));
  theme_disable(array('bartik'));

  // Remove overrideen theme settings.
  variable_del('theme_bhackin_theme_settings');

  // Migrate fields from user to profile.
  $link_map = array(
    'home'        => 'field_profile_website',
    'facebook'    => 'field_profile_facebook',
    'github-alt'  => 'field_profile_github',
    'google-plus' => 'field_profile_gplus',
    'linkedin'    => 'field_profile_linkedin',
    'twitter'     => 'field_profile_twitter',
  );
  $users    = user_load_multiple(array(), array('status' => 1));
  foreach ($users as $user) {
    if ($user->uid > 1) {
      $user_mdw    = entity_metadata_wrapper('user', $user);
      $profile     = profile2_by_uid_load($user->uid, 'profile');
      $profile_mdw = entity_metadata_wrapper('profile2', $profile);

      // Name to First name / Last name.
      list($first_name, $last_name) = explode(' ', $user_mdw->field_user_name->value());
      $profile_mdw->field_profile_first_name = $first_name;
      if (!empty($last_name)) {
        $profile_mdw->field_profile_last_name = $last_name;
      }

      // Links multifield to individual fields.
      $links = field_get_items('user', $user, 'field_user_links');
      if (is_array($links)) {
        foreach ($links as $link) {
          if (isset($link_map[$link['field_links_type'][LANGUAGE_NONE][0]['value']])) {
            $profile_mdw->{$link_map[$link['field_links_type'][LANGUAGE_NONE][0]['value']]}->url = url($link['field_links_url'][LANGUAGE_NONE][0]['url'], array('absolute' => TRUE));
          }
        }
      }

      // Biography to Bio.
      $profile_mdw->field_profile_bio = $user_mdw->field_user_bio->value();

      // IRC nickname to IRC nick.
      $profile_mdw->field_profile_irc = $user_mdw->field_user_irc->value();

      // Save profile.
      $profile_mdw->save();
    }
  }

  // Remove deprecated fields.  $fields = array()
  $fields = array(
    'field_links_type',
    'field_links_url',
    'field_user_name',
    'field_user_links',
    'field_user_bio',
    'field_user_irc',
  );
  foreach ($fields as $field) {
    field_delete_field($field);
  }

  // Remove deprecated profiles.
  $type = profile2_type_load('main');
  profile2_type_delete($type);

  // Add products.
  $products = array(
    'ASSOC' => array(
      'title'  => 'Association',
      'price'  => 50,
      'period' => 'year',
      'role'   => 'association member',
    ),
    'WORK1' => array(
      'title'  => 'Workshop',
      'price'  => 60,
      'period' => 'month',
      'role'   => 'workshop member',
    ),
  );
  foreach ($products as $sku => $product) {
    $commerce_product        = commerce_product_new('recurring');
    $commerce_product->sku   = $sku;
    $commerce_product->title = $product['title'];

    $fields = array(
      'commerce_price',
      'commerce_recurring_ini_price',
      'commerce_recurring_rec_price'
    );
    foreach ($fields as $field) {
      $commerce_product->{$field}[LANGUAGE_NONE][] = array(
        'amount'        => $product['price'] * 100,
        'currency_code' => 'AUD',
      );
    }

    $fields = array(
      'commerce_recurring_ini_period',
      'commerce_recurring_rec_period',
      'commerce_recurring_end_period',
    );
    foreach ($fields as $field) {
      $commerce_product->{$field}[LANGUAGE_NONE][] = array(
        'interval' => 1,
        'period'   => $product['period'],
      );
    }

    $commerce_product->field_recurring_role[LANGUAGE_NONE][]['value'] = user_role_load_by_name($product['role'])->rid;

    commerce_product_save($commerce_product);
  }

  // Add 'Workshop hours' taxonomy term.
  $term                          = new stdClass();
  $term->vid                     = taxonomy_vocabulary_machine_name_load('event_type')->vid;
  $term->name                    = 'Workshop hours';
  $term->vocabulary_machine_name = 'event_type';
  taxonomy_term_save($term);

  // Disable rules.
  $rules = array(
    'commerce_cart_add_to_cart_message',
    'commerce_cart_order_status_reset',
    'commerce_cart_unset_disabled_products',
    'commerce_checkout_new_account',
    'commerce_checkout_order_email',
    'commerce_checkout_order_convert',
    'commerce_checkout_order_created_date_update',
    'commerce_recurring_assign_recurring_entity',
  );
  foreach ($rules as $rule) {
    $rule         = rules_config_load($rule);
    $rule->active = FALSE;
    $rule->save();
  }

  // Disable and uninstall unused modules.
  $modules = array('navbar');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}
