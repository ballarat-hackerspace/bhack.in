<?php
/**
 * @file
 * Installation functions for bHack.in core
 */

/**
 * Implements hook_install().
 */
function bhackin_core_install() {
  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Assign 'superuser' role to 'admin'.
  // @TODO - Patch Profiler to allow updating of existing users.
  $user = user_load(1);

  $user->mail = 'admin@bhack.in';

  $roles = user_roles();
  foreach ($roles as $rid => $role) {
    if ($role == 'superuser') {
      $user->roles[$rid] = $role;
      break;
    }
  }
  user_save($user);

  // @TODO - Add OAuth Connector 'email' field during install.
  // @TODO - Make OAuth Connector fields exportable. #2260353
}

/**
 * Implements hook_persistent_update().
 */
function bhackin_core_persistent_update() {
  // Flush caches and revert features.
  _bhackin_core_flush_revert();
}

/**
 * Helper function; Enable dependencies, flush caches and revert the feature.
 */
function _bhackin_core_flush_revert() {
  if (empty($modules)) {
    $modules = basename(__FILE__, '.install');
  }
  if (!is_array($modules)) {
    $modules = array($modules);
  }

  $revert = array();
  foreach ($modules as $module) {
    $info = system_get_info('module', $module);

    // Enable all dependencies.
    module_enable($info['dependencies']);

    // Forcefully clear Features caches.
    module_load_include('inc', 'features', 'features.export');
    foreach (array_keys($info['features']) as $component) {
      features_get_components($component, NULL, TRUE);
      features_include_defaults($component, TRUE);
      features_get_default($component, $module, TRUE, TRUE);
    }

    // Revert all feature components except for 'OAuth Connector providers'.
    unset($info['features']['oauthconnector_provider']);

    // Build components list for feature revert.
    $revert[$module] = array_keys($info['features']);
  }

  // Flush Prepro cache.
  cache_clear_all('prepro:map', 'cache_prepro');

  // Flush all standard Drupal caches.
  drupal_flush_all_caches();

  features_revert($revert);
}

/**
 * Delete old Blog link, flush caches and revert the feature.
 */
function bhackin_core_update_7100() {
  // Delete old Blog link.
  menu_link_delete(205);

  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();
  features_revert(array('bhackin_core' => array('variable', 'permissions')));
}

/**
 * Flush caches and revert the feature, delete existing user aliases and
 * regenerate user aliases.
 */
function bhackin_core_update_7102() {
  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Run a second time due to Multifield oddity.
  _bhackin_core_flush_revert();

  // Delete existing User aliases.
  db_delete('url_alias')
    ->condition('source', db_like('user/') . '%', 'LIKE')
    ->execute();

  // Regenerate User aliases.
  $uids = db_select('users', 'u')
    ->fields('u', array('uid'))
    ->condition('uid', '0', '>')
    ->execute()
    ->fetchCol('uid');
  pathauto_user_update_alias_multiple($uids, 'bulkupdate', array('alias blog' => FALSE));
}

/**
 * Flush caches and revert the feature.
 */
function bhackin_core_update_7103() {
  _bhackin_core_flush_revert();
}

/**
 * Toggle default themes, migrate fields from user to profile, add products and
 * disable rules.
 */
function bhackin_core_update_7104() {
  // Flush caches and revert the feature.
  _bhackin_core_flush_revert();

  // Toggle default theems.
  theme_enable(array('bhackin_theme'));
  theme_disable(array('bartik'));

  // Remove overrideen theme settings.
  variable_del('theme_bhackin_theme_settings');

  // Migrate fields from user to profile.
  $link_map = array(
    'home'        => 'field_profile_website',
    'facebook'    => 'field_profile_facebook',
    'github-alt'  => 'field_profile_github',
    'google-plus' => 'field_profile_gplus',
    'linkedin'    => 'field_profile_linkedin',
    'twitter'     => 'field_profile_twitter',
  );
  $users    = user_load_multiple(array(), array('status' => 1));
  foreach ($users as $user) {
    if ($user->uid > 1) {
      $user_mdw    = entity_metadata_wrapper('user', $user);
      $profile     = profile2_by_uid_load($user->uid, 'profile');
      $profile_mdw = entity_metadata_wrapper('profile2', $profile);

      // Name to First name / Last name.
      list($first_name, $last_name) = explode(' ', $user_mdw->field_user_name->value());
      $profile_mdw->field_profile_first_name = $first_name;
      if (!empty($last_name)) {
        $profile_mdw->field_profile_last_name = $last_name;
      }

      // Links multifield to individual fields.
      $links = field_get_items('user', $user, 'field_user_links');
      if (is_array($links)) {
        foreach ($links as $link) {
          if (isset($link_map[$link['field_links_type'][LANGUAGE_NONE][0]['value']])) {
            $profile_mdw->{$link_map[$link['field_links_type'][LANGUAGE_NONE][0]['value']]}->url = url($link['field_links_url'][LANGUAGE_NONE][0]['url'], array('absolute' => TRUE));
          }
        }
      }

      // Biography to Bio.
      $profile_mdw->field_profile_bio = $user_mdw->field_user_bio->value();

      // IRC nickname to IRC nick.
      $profile_mdw->field_profile_irc = $user_mdw->field_user_irc->value();

      // Save profile.
      $profile_mdw->save();
    }
  }

  // Remove deprecated fields.  $fields = array()
  $fields = array(
    'field_links_type',
    'field_links_url',
    'field_user_name',
    'field_user_links',
    'field_user_bio',
    'field_user_irc',
  );
  foreach ($fields as $field) {
    field_delete_field($field);
  }

  // Remove deprecated profiles.
  $type = profile2_type_load('main');
  profile2_type_delete($type);

  // Add products.
  $products = array(
    'ASSOC' => array(
      'title'  => 'Association',
      'price'  => 50,
      'period' => 'year',
      'role'   => 'association member',
    ),
    'WORK1' => array(
      'title'  => 'Workshop',
      'price'  => 60,
      'period' => 'month',
      'role'   => 'workshop member',
    ),
  );
  foreach ($products as $sku => $product) {
    $commerce_product        = commerce_product_new('recurring');
    $commerce_product->sku   = $sku;
    $commerce_product->title = $product['title'];

    $fields = array(
      'commerce_price',
      'commerce_recurring_ini_price',
      'commerce_recurring_rec_price'
    );
    foreach ($fields as $field) {
      $commerce_product->{$field}[LANGUAGE_NONE][] = array(
        'amount'        => $product['price'] * 100,
        'currency_code' => 'AUD',
      );
    }

    $fields = array(
      'commerce_recurring_ini_period',
      'commerce_recurring_rec_period',
    );
    foreach ($fields as $field) {
      $commerce_product->{$field}[LANGUAGE_NONE][] = array(
        'interval' => 1,
        'period'   => $product['period'],
      );
    }

    $commerce_product->field_recurring_role[LANGUAGE_NONE][]['value'] = user_role_load_by_name($product['role'])->rid;

    commerce_product_save($commerce_product);
  }

  // Disable rules.
  $rules = array(
    'commerce_cart_add_to_cart_message',
    'commerce_cart_order_status_reset',
    'commerce_cart_unset_disabled_products',
    'commerce_checkout_new_account',
    'commerce_checkout_order_email',
    'commerce_checkout_order_convert',
    'commerce_checkout_order_created_date_update',
    'commerce_recurring_assign_recurring_entity',
  );
  foreach ($rules as $rule) {
    $rule         = rules_config_load($rule);
    $rule->active = FALSE;
    $rule->save();
  }

  // Disable and uninstall unused modules.
  $modules = array('navbar');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

/**
 * Add 'Event type' taxonomy terms, flush caches and revert features and
 * pre-populate some events.
 */
function bhackin_core_update_7105() {
  // Add 'Event type' taxonomy terms.
  $terms = array();

  $term                          = new stdClass();
  $term->vid                     = 2;
  $term->name                    = 'Workshop hours';
  $term->vocabulary_machine_name = 'event_type';
  taxonomy_term_save($term);
  $terms['workshop'] = $term;

  $term                          = new stdClass();
  $term->vid                     = 2;
  $term->name                    = 'Meetup';
  $term->vocabulary_machine_name = 'event_type';
  taxonomy_term_save($term);
  $terms['meetup'] = $term;

  // Flush caches and revert features.
  _bhackin_core_flush_revert();

  // Pre-populate someevents.
  $events = array(
    array(
      'value'        => '2015-02-14 09:00:00',
      'value2'       => '2015-02-14 15:00:00',
      'rrule'        => 'RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=SA;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 1,
      'type'         => 'workshop',
    ),
    array(
      'value'        => '2015-02-16 18:00:00',
      'value2'       => '2015-02-16 21:00:00',
      'rrule'        => 'RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=MO;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 1,
      'type'         => 'workshop',
    ),
    array(
      'value'        => '2015-02-17 16:00:00',
      'value2'       => '2015-02-17 19:00:00',
      'rrule'        => 'RRULE:FREQ=WEEKLY;INTERVAL=1;BYDAY=TU;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 1,
      'type'         => 'workshop',
    ),
    array(
      'value'        => '2015-02-17 19:00:00',
      'value2'       => '2015-02-17 21:00:00',
      'rrule'        => 'RRULE:FREQ=MONTHLY;INTERVAL=1;BYDAY=+3TU;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 0,
      'type'         => 'meetup',
    ),
    array(
      'value'        => '2015-03-03 19:00:00',
      'value2'       => '2015-03-03 21:00:00',
      'rrule'        => 'RRULE:FREQ=MONTHLY;INTERVAL=1;BYDAY=+1TU;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 0,
      'type'         => 'meetup',
    ),
    array(
      'value'        => '2015-03-31 19:00:00',
      'value2'       => '2015-03-31 21:00:00',
      'rrule'        => 'RRULE:FREQ=MONTHLY;INTERVAL=1;BYDAY=+5TU;UNTIL=20151231T125959Z;WKST=SU',
      'members_only' => 0,
      'type'         => 'meetup',
    ),
  );

  foreach ($events as $event) {
    $node       = new stdClass();
    $node->type = 'event';
    node_object_prepare($node);
    $node->uid    = 1;
    $node->status = 1;

    $field = field_info_field('field_event_date_time');
    $item  = array(
      'value'       => $event['value'],
      'value2'      => $event['value2'],
      'rrule'       => $event['rrule'],
      'timezone'    => 'Australia/Melbourne',
      'timezone_db' => 'Australia/Melbourne',
      'date_type'   => 'datetime',
    );

    $node->field_event_date_time[LANGUAGE_NONE]               = date_repeat_build_dates($item['rrule'], array(), $field, $item);
    $node->field_event_members_only[LANGUAGE_NONE][]['value'] = $event['members_only'];
    $node->field_event_type[LANGUAGE_NONE][]['tid']           = $terms[$event['type']]->tid;

    node_save($node);
  }
}

/**
 * Uninstall modules.
 */
function bhackin_core_update_7106() {
  $modules = array('admin_select');
  module_disable($modules);
  drupal_uninstall_modules($modules);
}

/**
 * Flush caches and revert features.
 */
function bhackin_core_update_7107() {
  _bhackin_core_flush_revert();
}

/**
 * Flush caches, revert features and add Contact information Bean.
 */
function bhackin_core_update_7108() {
  // Flush caches and revert features.
  _bhackin_core_flush_revert();

  // Add Contact information Bean.
  $bean = bean_create(array(
    'label'            => 'Contact information',
    'type'             => 'block',
    'delta'            => 'contact-information',
    'field_block_body' => array(
      LANGUAGE_NONE => array(
        array('value' => 'Have questions, suggestions or a general enquiry for the Ballarat Hackerspace? Fill out the form bellow and we\'ll get back to you as soon as humanly possible.')
      )
    )
  ));
  $bean->save();
}

/**
 * Add 'Special' event type taxonomy term and delete 'Body' condition on 'Event'
 * content type.
 */
function bhackin_core_update_7109() {
  // Add 'Special' event type taxonomy term.
  $term                          = new stdClass();
  $term->vid                     = 2;
  $term->name                    = 'Special';
  $term->vocabulary_machine_name = 'event_type';
  taxonomy_term_save($term);

  // Delete 'Body' condition on 'Event' content type.
  conditional_fields_dependency_delete(array(12));
}

/**
 * Remove 'End date' from recurring products and entities and disable default
 * recurring order generation rule.
 */
function bhackin_core_update_7110() {
  // Remove 'End date' from recurring products and entities.
  $products = commerce_product_load_multiple(array(), array('type' => 'recurring'));
  foreach ($products as $product) {
    $product->commerce_recurring_end_period = array();
    commerce_product_save($product);
  }

  $query   = new EntityFieldQuery();
  $results = $query->entityCondition('entity_type', 'commerce_recurring')
    ->execute();
  if (isset($results['commerce_recurring'])) {
    $recurring_entities = commerce_recurring_load_multiple(array_keys($results['commerce_recurring']));
    foreach ($recurring_entities as $recurring_entity) {
      $recurring_entity->end_date = 0;
      entity_save('commerce_recurring', $recurring_entity);
    }
  }

  // Disable default recurring order generation rule.
  drupal_flush_all_caches();
  $rule = rules_config_load('commerce_recurring_cron_generate_orders');
  $rule->active = FALSE;
  $rule->save();
}
